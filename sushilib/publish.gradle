apply plugin: 'maven-publish'
def rootConfiguration = rootProject.ext
def GITHUB_TOKEN = System.getenv("GITHUB_TOKEN")

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier.set('sources')
}

artifacts {
    archives sourcesJar
}

publishing {
    publications {
        def variants = ["release", "external"]
        variants.forEach { variant -> // variant: release, external
            "${variant}Aar"(MavenPublication) {
                groupId "$libraryGroupId"
                version rootConfiguration.global_version_name
                if(variant == "external")
                    artifactId "${libraryArtifactId}-${variant}"
                else
                    artifactId "$libraryArtifactId"
                ext.variant = variant

                if (variant != 'external') {
                    // Following artifacts will not be published into external repo
                    artifact sourcesJar
                    // Mapping will be only published in case of external variant but we will send it to zomato repo
                    artifact("$buildDir/outputs/mapping/external/mapping.txt") { classifier 'mapping' }
                }
                artifact "$buildDir/outputs/aar/${project.name}-${variant}.aar"

                pom.withXml {
                    //Creating additional node for dependencies
                    def dependenciesNode = asNode().appendNode('dependencies')

                    //Defining configuration names from which dependencies will be taken (debugCompile or releaseCompile and compile)
                    def configurationNames = ["implementation"]

                    configurationNames.each { configurationName ->
                        configurations[configurationName].allDependencies.each {
                            if (it.group != null && it.name != null) {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)

                                //If there are any exclusions in dependency
                                if (it.excludeRules.size() > 0) {
                                    def exclusionsNode = dependencyNode.appendNode('exclusions')
                                    it.excludeRules.each { rule ->
                                        def exclusionNode = exclusionsNode.appendNode('exclusion')
                                        exclusionNode.appendNode('groupId', rule.group)
                                        exclusionNode.appendNode('artifactId', rule.module)
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    repositories {
        maven {
            name = "zomato"
            credentials(HttpHeaderCredentials) {
                name = "Authorization"
                value = "token ${GITHUB_TOKEN}"
            }
            url = "https://maven.pkg.github.com/Zomato/Sushi-Android"
            authentication {
                header(HttpHeaderAuthentication)
            }
        }
        maven {
            name = "external"
            url = "https://zartifacts-***REMOVED***.d.codeartifact.ap-southeast-1.amazonaws.com/maven/zomato-android-libs"
            credentials{
                username = "aws"
                password = System.getenv("CODEARTIFACT_AUTH_TOKEN")
            }
        }
    }

}

tasks.withType(PublishToMavenRepository) {
    onlyIf {
        (repository == publishing.repositories.zomato && publication.variant != 'external') ||
                (repository == publishing.repositories.external && publication.variant == 'external')
    }
}