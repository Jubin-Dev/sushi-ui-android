apply plugin: 'maven-publish'
def GITHUB_TOKEN = System.getenv("GITHUB_TOKEN")

task sourcesJar(type: Jar) {
    println(android.sourceSets.main.java.srcDirs)
    from android.sourceSets.main.java.srcDirs
    archiveClassifier = 'sources'
}
task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

publish.dependsOn javadocJar
publish.dependsOn sourcesJar
publish.dependsOn build

publishing {
    publications {
        aar(MavenPublication) {
            groupId "$libraryGroupId"
            version "$libraryVersion"
            artifactId "$libraryArtifactId"

            artifact "$buildDir/outputs/aar/${project.name}-release.aar"
            // Github doesn't support classified artifacts yet.
//            artifact (sourcesJar)
//            artifact (javadocJar)

            pom.withXml {
                //Creating additional node for dependencies
                def dependenciesNode = asNode().appendNode('dependencies')

                //Defining configuration names from which dependencies will be taken (debugCompile or releaseCompile and compile)
                def configurationNames = ["implementation"]

                configurationNames.each { configurationName ->
                    configurations[configurationName].allDependencies.each {
                        if (it.group != null && it.name != null) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)

                            //If there are any exclusions in dependency
                            if (it.excludeRules.size() > 0) {
                                def exclusionsNode = dependencyNode.appendNode('exclusions')
                                it.excludeRules.each { rule ->
                                    def exclusionNode = exclusionsNode.appendNode('exclusion')
                                    exclusionNode.appendNode('groupId', rule.group)
                                    exclusionNode.appendNode('artifactId', rule.module)
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    repositories {
        maven {
            credentials(HttpHeaderCredentials) {
                name = "Authorization"
                value = "token ${GITHUB_TOKEN}"
            }
            url = "https://maven.pkg.github.com/Zomato/Sushi-Android"
            authentication {
                header(HttpHeaderAuthentication)
            }
        }
    }

}